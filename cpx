#! /usr/bin/env php
<?php

use Cpx\Console;
use Cpx\Package;
use Cpx\PackageAliases;
use Cpx\Commands\Command;
use Cpx\Commands\ExecCommand;
use Cpx\Commands\HelpCommand;
use Cpx\Commands\ListCommand;
use Cpx\Commands\TestCommand;
use Cpx\Commands\CheckCommand;
use Cpx\Commands\CleanCommand;
use Cpx\Commands\FormatCommand;
use Cpx\Commands\TinkerCommand;
use Cpx\Commands\UpdateCommand;
use Cpx\Commands\AliasesCommand;
use Cpx\Commands\UpgradeCommand;
use Cpx\Commands\VersionCommand;

require_once __DIR__ . '/vendor/autoload.php';

function printColor(string $message, string $color = "\033[1;32m"): void
{
    echo $color . $message . "\033[0m" . PHP_EOL;
}

array_shift($argv);
$console = Console::parse($argv ?? []);

$command = match($console->command) {
    'list' => ListCommand::class,
    'help' => HelpCommand::class,
    'clean' => CleanCommand::class,
    'aliases' => AliasesCommand::class,
    'update' => UpdateCommand::class,
    'upgrade' => UpgradeCommand::class,
    'exec' => ExecCommand::class,
    'format', 'fmt' => FormatCommand::class,
    'check', 'analyze', 'analyse' => CheckCommand::class,
    'test' => TestCommand::class,
    'tinker' => TinkerCommand::class,
    'version' => VersionCommand::class,
    default => function () use ($console) {
        if (file_exists(realpath($console->command)) && !is_dir(realpath($console->command))) {
            return (new ExecCommand(Console::parse("exec {$console->command} {$console->getCommandInput()}")))();
        } elseif (array_key_exists($console->command, PackageAliases::$packages)) {
            Package::parse(PackageAliases::$packages[$console->command]['package'])->runCommand($console);
            return;
        } elseif (str_contains($console->command, '/')) {
            // Run the command, assuming the default bin and forwarding args
            Package::parse($console->command)->runCommand($console);
            return;
        }

        $cpxConsole = Console::parse("cpx {$console}");

        if ($cpxConsole->hasOption('version') || $cpxConsole->hasOption('v')) {
            return (new VersionCommand($console))();
        }

        return (new HelpCommand($console))(true);
    },
};

try {
    if (is_subclass_of($command, Command::class)) {
        $command = new $command($console);
        $command();
    } elseif (is_callable($command)) {
        $command();
    }
} catch (Exception $e) {
    echo Command::BACKGROUND_RED . "  {$e->getMessage()}  " . Command::COLOR_RESET . PHP_EOL;
    exit(1);
}
